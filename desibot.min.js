(function loadDesiBotCSS() {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = "https://cdn.jsdelivr.net/gh/darksmogai/desiaibot@v1.0.5/desibot.min.css";
  document.head.appendChild(link);
})();

window.initDesiBot = function ({
  userId,
  theme = "light",
  title = "DesiBot",
  position = "bottom-right",
  backendUrl = "http://localhost:8080",
  color = "#012970"
}) {
  window.addEventListener("load", () => {
    // Inject dynamic CSS variables for theme color
    const style = document.createElement("style");
    style.innerHTML = `
      :root {
        --desibot-primary: ${color};
      }
      #desibot-launcher {
        background: var(--desibot-primary) !important;
      }
      #desibot-header {
        background: linear-gradient(135deg, var(--desibot-primary), var(--desibot-primary)) !important;
      }
      .desibot-bot .desibot-container {
        background: var(--desibot-primary) !important;
      }
      #desibot-send {
        background: var(--desibot-primary) !important;
      }
    `;
    document.head.appendChild(style);

    const launcher = document.createElement("div");
    launcher.id = "desibot-launcher";
    launcher.className = `desibot-launcher ${position}`;
    launcher.innerHTML = "üí¨";
    document.body.appendChild(launcher);

    let container;
    let isFirstTime = true;

    launcher.onclick = function () {
      if (!container) {
        const favicon = document.querySelector("link[rel~='icon']")?.href || "/favicon.ico";

        container = document.createElement("div");
        container.id = "desibot-container";
        container.className = `desibot-${theme} ${position}`;

        container.innerHTML = `
          <div id="desibot-header">
            <div style="display:flex; align-items:center; gap:8px;">
              <img src="${favicon}" alt="favicon" style="width:20px; height:20px; border-radius:4px;">
              <span>${title}</span>
            </div>
            <span id="desibot-close">√ó</span>
          </div>
          <div id="desibot-messages"></div>
          <div id="desibot-input-container">
            <input type="text" id="desibot-input" placeholder="Enter your mobile number..." maxlength="10" />
            <button id="desibot-send">‚û§</button>
          </div>
        `;

        document.body.appendChild(container);
      }

      container.style.display = "flex";
      launcher.style.display = "none";

      const closeBtn = container.querySelector("#desibot-close");
      const messagesDiv = container.querySelector("#desibot-messages");
      const input = container.querySelector("#desibot-input");
      const sendBtn = container.querySelector("#desibot-send");

      let step = 0;
      let mobile = "";
      let userName = "";

      function appendMessage(text, sender = "bot") {
        const div = document.createElement("div");
        div.className = `desibot-message desibot-${sender}`;
        div.innerHTML = `
          <div class="desibot-container">
            <div class="desibot-text">${text}</div>
          </div>
          <div class="desibot-meta">
            ${sender === "user" ? "‚úî‚úî" : ""} ${formatTime(new Date())}
          </div>
        `;
        messagesDiv.appendChild(div);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
      }

      function formatTime(date) {
        let hours = date.getHours();
        let minutes = date.getMinutes();
        const ampm = hours >= 12 ? "PM" : "AM";
        hours = hours % 12 || 12;
        minutes = minutes < 10 ? "0" + minutes : minutes;
        return `${hours}:${minutes} ${ampm}`;
      }

      function fetchChatHistory() {
        fetch(`${backendUrl}/api/chat/history`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ mobile, userId })
        })
          .then(res => res.json())
          .then(data => {
            if (data && Array.isArray(data)) {
              data.forEach(message => {
                appendMessage(message.message, message.sender);
              });
              if (data.length > 0) {
                setTimeout(() => {
                  appendMessage(`üëã Welcome back, ${userName}!`, "bot");
                }, 300);
              }
            }
          })
          .catch(() => appendMessage("‚ö†Ô∏è Unable to fetch chat history."));
      }

      function handleInput() {
    const text = input.value.trim();
    if (!text) return;

    if (step === 0) {
      if (/^\d{10}$/.test(text)) {
        mobile = text;
        appendMessage(`Got it! Now, what's your name?`, "bot");
        input.value = "";
        input.placeholder = "Enter your name...";
        input.removeAttribute("maxlength");
        step = 1;
      } else {
        appendMessage("‚ö†Ô∏è Please enter a valid 10-digit mobile number.", "bot");
        input.value = "";
      }
    } else if (step === 1) {
      userName = text;
      appendMessage(`Hello ${userName}! How can I assist you today?`, "bot");
      input.placeholder = "Type your message here...";
      input.value = "";
      step = 2;
      fetchChatHistory();
    } else if (step === 2) {
      appendMessage(text, "user");
      input.value = "";

      // Add typing indicator
      const typingDiv = document.createElement("div");
      typingDiv.className = "desibot-message desibot-bot typing";
      typingDiv.innerHTML = `
        <div class="desibot-container">
          <div class="desibot-text">Typing...</div>
        </div>
        <!-- <div class="desibot-meta">${formatTime(new Date())}</div> -->
      `;
      messagesDiv.appendChild(typingDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;

      fetch(`${backendUrl}/api/chat/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          mobile,
          userid: userId,
          text,
          sender: "user",
          sendername: userName
        })
      })
        .then(res => res.json())
        .then(data => {
          typingDiv.remove(); // Remove "Typing..."
          appendMessage(data.message || "‚úîÔ∏è Received");
        })
        .catch(() => {
          typingDiv.remove();
          appendMessage("‚ö†Ô∏è Unable to reach server.");
        });
    }
  }
      sendBtn.onclick = handleInput;
      input.addEventListener("keypress", function (e) {
        if (step === 0 && !/^\d$/.test(e.key) && e.key !== "Backspace") e.preventDefault();
        if (e.key === "Enter") handleInput();
      });

      closeBtn.onclick = () => {
        container.style.display = "none";
        launcher.style.display = "flex";
      };

      if (isFirstTime) {
        appendMessage("üëã Hey! I'm DesiBot. Please enter your mobile number.", "bot");
        isFirstTime = false;
      }
    };
  });
};
