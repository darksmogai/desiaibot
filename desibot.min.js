(function loadDesiBotCSS() {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = "https://cdn.jsdelivr.net/gh/darksmogai/desiaibot@v1.0.7/desibot.min.css";
  document.head.appendChild(link);
})();
let storedHistory = [];

function hexToHSL(hex) {
  hex = hex.replace('#', '');
  if (hex.length === 3) {
    hex = hex.split('').map(x => x + x).join('');
  }
  const r = parseInt(hex.substring(0, 2), 16) / 255;
  const g = parseInt(hex.substring(2, 4), 16) / 255;
  const b = parseInt(hex.substring(4, 6), 16) / 255;

  const max = Math.max(r, g, b), min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;

  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }
    h *= 60;
  }

  return {
    h: Math.round(h),
    s: Math.round(s * 100) + '%',
    l: Math.round(l * 100) + '%'
  };
}
window.initDesiBot = function ({
  userId,
  theme = "light",
  title = "DesiBot",
  position = "bottom-right",
  backendUrl = "http://localhost:8080",
  color = ""
}) {
  window.addEventListener("load", () => {
    const { h, s, l } = hexToHSL(color);
    const style = document.createElement("style");
    style.innerHTML = `
      :root {
        --desibot-primary: ${color};
        --desibot-primary-h: ${h};
        --desibot-primary-s: ${s};
        --desibot-primary-l: ${l};
        --desibot-primary-light: hsl(${h}, ${s}, 70%);

      }
      #desibot-launcher {
        background: linear-gradient(135deg, var(--desibot-primary),var(--desibot-primary-light)) !important;
        transition: transform 0.3s ease;
      }
      #desibot-launcher:hover {
        transform: scale(1.1);
      }
      #desibot-header {
        background: linear-gradient(135deg, var(--desibot-primary),  var(--desibot-primary-light)) !important;
      }
      #desibot-send {
        background: var(--desibot-primary) !important;
      }
      .typing .desibot-text {
        display: flex;
        gap: 3px;
      }
      .typing .desibot-text::before {
        content: '‚óè';
        animation: dots 1s infinite steps(3, jump-none);
      }
      @keyframes dots {
        0% { content: '‚óè'; }
        33% { content: '‚óè‚óè'; }
        66% { content: '‚óè‚óè‚óè'; }
        100% { content: '‚óè'; }
      }
    `;
    document.head.appendChild(style);

    const launcher = document.createElement("div");
    launcher.id = "desibot-launcher";
    launcher.className = `desibot-launcher ${position}`;
    //launcher.innerHTML = "ü§ñ";
    launcher.innerHTML = `<img src="/bot-logo.png" alt="DesiBot" style="width: 30px; height: 30px;" />`;

    document.body.appendChild(launcher);

    let container;
    let isFirstTime = true;

    launcher.onclick = function () {
      if (!container) {
        const favicon = document.querySelector("link[rel~='icon']")?.href || "https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/1f916.svg";

        container = document.createElement("div");
        container.id = "desibot-container";
        container.className = `desibot-${theme} ${position}`;
        container.innerHTML = `

        <div id="desibot-header">
    <!-- Top content -->
    <div class="desibot-header-title-wrapper">
      <div class="desibot-header-title">
        <img src="${favicon}" alt="icon" class="desibot-logo" />
        <span style="font-size: 16px; font-weight: 600;">${title}</span>
      </div>
      <span id="desibot-close"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M17.7375 7.36914L19.5 9.13164L12 16.6316L4.5 9.13164L6.2625 7.36914L12 13.0941L17.7375 7.36914Z"></path></svg></span>
    </div>

    <!-- Curved SVG bottom -->
    <svg viewBox="0 0 500 80" preserveAspectRatio="none"
      style="position: absolute; bottom: 0; left: 0; width: 100%; height: 40px; z-index: 1;">
      <path d="M0,30 C150,90 350,-30 500,30 L500,80 L0,80 Z" fill="#f0f4f8"></path>
    </svg>
  </div>


          <div id="desibot-messages"></div>
          <div id="desibot-input-container">
            <input type="text" id="desibot-input" placeholder="Enter your mobile number..." maxlength="10" />
            <button id="desibot-send">‚û§</button>
          </div>
          <div id="desibot-footer">
            <svg id="ic_attachFile" fill="#000000" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-hidden="true"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12.5 22C9.46 22 7 19.54 7 16.5L7 6C7 3.79 8.79 2 11 2C13.21 2 15 3.79 15 6L15 14.5C15 15.88 13.88 17 12.5 17C11.12 17 10 15.88 10 14.5L10 7L12 7L12 14.59C12 15.14 13 15.14 13 14.59L13 6C13 4.9 12.1 4 11 4C9.9 4 9 4.9 9 6L9 16.5C9 18.43 10.57 20 12.5 20C14.43 20 16 18.43 16 16.5L16 7H18L18 16.5C18 19.54 15.54 22 12.5 22Z"></path></svg>
           <div class="desibot-footer-title">
  Powered By 
  <a href="https://darksmogai.com" target="_blank"  style="text-decoration: none; color: inherit;" rel="noopener noreferrer">
    <span>Darksmog.ai</span>
  </a>
</div>

          </div>
        `;
        document.body.appendChild(container);
      }

      container.style.display = "flex";
      launcher.style.display = "none";

      const closeBtn = container.querySelector("#desibot-close");
      const messagesDiv = container.querySelector("#desibot-messages");
      const input = container.querySelector("#desibot-input");
      const sendBtn = container.querySelector("#desibot-send");

      let step = 0;
      let mobile = "";
      let userName = "";

      function appendMessage(text, sender = "bot") {
        const div = document.createElement("div");
        div.className = `desibot-message desibot-${sender}`;
        div.innerHTML = `
          <div class="desibot-container">
            <div class="desibot-text">${text}</div>
          </div>
          <div class="desibot-meta">${sender === "user" ? "‚úî‚úî" : ""} ${formatTime(new Date())}</div>
        `;
        messagesDiv.appendChild(div);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
        return div;
      }


      function formatTime(date) {
  const now = new Date();

  const isToday =
    date.getDate() === now.getDate() &&
    date.getMonth() === now.getMonth() &&
    date.getFullYear() === now.getFullYear();

  let hours = date.getHours();
  let minutes = date.getMinutes();
  const ampm = hours >= 12 ? "PM" : "AM";
  hours = hours % 12 || 12;
  minutes = minutes < 10 ? "0" + minutes : minutes;
  const time = `${hours}:${minutes} ${ampm}`;

  if (isToday) {
    return time;
  } else {
    const day = date.getDate().toString().padStart(2, "0");
    const month = (date.getMonth() + 1).toString().padStart(2, "0"); // months are 0-based
    const year = date.getFullYear();
    return `${day}-${month}-${year}, ${time}`;
  }
}

function insertHistoryBelow(messagesDiv, anchorNode) {
  storedHistory.forEach(msg => {
    const d = document.createElement("div");
    d.className = `desibot-message desibot-${msg.sender}`;
    d.innerHTML = `
      <div class="desibot-container">
        <div class="desibot-text">${msg.message}</div>
      </div>
    `;

     d.innerHTML = `
          <div class="desibot-container">
            <div class="desibot-text">${msg.message}</div>
          </div>
          <div class="desibot-meta">${msg.message === "user" ? "‚úî‚úî" : ""} ${formatTime(new Date(msg.timestamp))}</div>
        `;
    messagesDiv.insertBefore(d, anchorNode.nextSibling);
    anchorNode = d; // Update anchor to insert next message after current
  });
}
      function fetchChatHistory() {
        fetch(`${backendUrl}/api/chat/history`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ mobile, userId })
        })
          .then(res => res.json())
          .then(data => {
            if (Array.isArray(data)) {
              data.forEach(msg => appendMessage(msg.message, msg.sender));
              if (data.length) {
                setTimeout(() => appendMessage(`üëã Welcome back, ${userName}!`, "bot"), 400);
              }
            }
          })
          .catch(() => appendMessage("‚ö†Ô∏è Couldn't load chat history.", "bot"));
      }

      function handleInput() {
        const text = input.value.trim();
        if (!text) return;

        if (step === 0) {
          if (/^\d{10}$/.test(text)) {
            mobile = text;
            appendMessage("Got it! Now, may I know your name?", "bot");
            input.value = "";
            input.placeholder = "Enter your name...";
            input.removeAttribute("maxlength");
            step = 1;
          } else {
            appendMessage("‚ö†Ô∏è Please enter a valid 10-digit mobile number to continue.", "bot");
            input.value = "";
          }
        } else if (step === 1) {
          userName = text;
          input.placeholder = "Ask anything...";
          step = 2;
          //
          const welcomeMsg = appendMessage(`Nice to meet you, ${userName}! ü§ó`, "bot");

          // Fetch chat history
          fetch(`${backendUrl}/api/chat/history`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ mobile, userId }),
          })
            .then(res => res.json())
            .then(data => {
              if (Array.isArray(data) && data.length > 0) {
                debugger
                storedHistory = data;
                const btn = document.createElement("div");
                btn.className = "desibot-load-history";
                btn.textContent = "Load your previous history";
                btn.onclick = () => {
                  insertHistoryBelow(messagesDiv, welcomeMsg);
                  btn.remove();
                };
                messagesDiv.insertBefore(btn, welcomeMsg.nextSibling);
              } else {
               appendMessage(`Nice to meet you, ${userName}! ü§ó`);
              }
            })
            .catch(() => appendMessage("‚ö†Ô∏è Could not load history."));
        }
        else if (step === 2) {
          appendMessage(text, "user");
          input.value = "";
          input.disabled = true;
          sendBtn.disabled = true;

          const typingDiv = document.createElement("div");
          typingDiv.className = "desibot-message desibot-bot typing";
          typingDiv.innerHTML = `
            <div class="desibot-container">
              <div class="desibot-text">‚óè‚óè‚óè</div>
            </div>
          `;
          messagesDiv.appendChild(typingDiv);
          messagesDiv.scrollTop = messagesDiv.scrollHeight;

          fetch(`${backendUrl}/api/chat/send`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              mobile,
              userid: userId,
              text,
              sender: "user",
              sendername: userName
            })
          })
            .then(res => res.json())
            .then(data => {
              typingDiv.remove();
              appendMessage(data.message || "‚úÖ Message received.");
            })
            .catch(() => {
              typingDiv.remove();
              appendMessage("‚ö†Ô∏è Failed to send message.");
            })
            .finally(() => {
              input.disabled = false;
              sendBtn.disabled = false;
              input.focus();
            });
        }
      }

      sendBtn.onclick = handleInput;
      input.addEventListener("keypress", e => {
        if (step === 0 && !/^\d$/.test(e.key) && e.key !== "Backspace") e.preventDefault();
        if (e.key === "Enter") handleInput();
      });

      closeBtn.onclick = () => {
        container.style.display = "none";
        launcher.style.display = "flex";
      };

      if (isFirstTime) {
        appendMessage("üëã Hi there! I'm DesiBot, your smart assistant. To get started, please enter your 10-digit mobile number.", "bot");
        isFirstTime = false;
      }
    };
  });
};


